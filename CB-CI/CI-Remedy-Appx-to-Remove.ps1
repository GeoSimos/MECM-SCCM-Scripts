<#
.SYNOPSIS
    Remediation script to remove specified AppxPackages.

.DESCRIPTION
    This script removes AppxPackages listed in a CSV file (generated by check-appx-to-remove.ps1).
    Intended for use as a remediation script in Configuration Manager Configuration Baselines.

.PARAMETER csvPath
    Path to the CSV file containing the list of Appx package names to remove.

.NOTES
    Author: George Simos <George_Simos@hotmail.com>
    Date: 20-06-2025
    Last Modified: 13-08-2025
    Version: 1.1
    -Added CMTrace logging functionality and implemented logging for each AppxPackage removal and errors.
    -Added default value for CSV Parameter as it can't be passed in a ConfigMgr Configuration Baseline Item.
    -Removed exit commands as they are not suitable for use in a ConfigMgr configuration baseline compliance script.
    -Added removal only when the Appx package is installed for all users or provisioned. 
    That is, it will not attempt to remove Appx packages regardless.
    Modified: 01-09-2025
    -Added Microsoft Teams Personal for Windows 11.
    Modified: 03-09-2025
    -Fixed wrong month format in CMTrace logging function.
#>

# Remediate-Appx-to-Remove.ps1
# Removes AppxPackages listed in a CSV file (from check-appx-to-remove.ps1)
$ErrorActionPreference = 'Stop'

# Functions definition block

# Function to write logs in CMTrace format
function Write-CMTraceLog {
    param (
        [string]$Message,
        [string]$Component = "AppxRemoval",
        [ValidateSet("Info", "Warning", "Error")]
        [string]$Severity = "Info",
        [string]$LogPath = "$env:Windir\Logs\Windows-AppxRemoval.log"
    )

    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss.fff"
    $threadId = [System.Diagnostics.Process]::GetCurrentProcess().Id
    $entry = "$timestamp $threadId $Component $Severity $Message"
    Add-Content -Path $LogPath -Value $entry
}

# Parameters definition block
#$csvPath = ".\AppxList.csv"
# param(
#     [Parameter(Mandatory = $true)]
#     [string]$csvPath = $csvDefaultFile
# )

# Internal list of Appx packages to remove
$AppxPackagesToRemove = @(
    @{ AppxName = "Clipchamp.Clipchamp" },
    @{ AppxName = "Microsoft.549981C3F5F10" },
    @{ AppxName = "Microsoft.Copilot" },
    @{ AppxName = "Microsoft.GamingApp" },
    @{ AppxName = "Microsoft.GetHelp" },
    @{ AppxName = "Microsoft.Getstarted" },
    @{ AppxName = "Microsoft.MicrosoftOfficeHub" },
    @{ AppxName = "Microsoft.MicrosoftSolitaireCollection" },
    @{ AppxName = "Microsoft.MicrosoftStickyNotes" },
    @{ AppxName = "Microsoft.MSPaint" },
    @{ AppxName = "Microsoft.OutlookForWindows" },
    @{ AppxName = "Microsoft.People" },
    @{ AppxName = "Microsoft.StorePurchaseApp" },
    @{ AppxName = "MicrosoftTeams" },
    @{ AppxName = "Microsoft.windowscommunicationsapps" },
    @{ AppxName = "Microsoft.WindowsFeedbackHub" },
    @{ AppxName = "Microsoft.Xbox.TCUI" },
    @{ AppxName = "Microsoft.XboxGameOverlay" },
    @{ AppxName = "Microsoft.XboxGamingOverlay" },
    @{ AppxName = "Microsoft.XboxIdentityProvider" },
    @{ AppxName = "Microsoft.XboxSpeechToTextOverlay" },
    @{ AppxName = "Microsoft.YourPhone" },
    @{ AppxName = "Microsoft.ZuneVideo" }
) 

<# # Check if the CSV file exists
if (-not (Test-Path $csvPath)) {
    Write-CMTraceLog -Message "CSV file not found: $csvPath" -Severity "Error"
    Write-Output "NonCompliant: CSV file not found: $csvPath"
    return
}

$AppxPackagesToRemove = Import-Csv -Path $csvPath  #>
$errors = @()

foreach ($AppxPackage in $AppxPackagesToRemove) {
    try {
        # Log the start of the removal process for the current package
        Write-CMTraceLog -Message "Starting removal for AppxPackage: $($AppxPackage.AppxName)" -Severity "Info"

        # Check if the Appx package is installed for any user
        $found = Get-AppxPackage -Name $AppxPackage.AppxName -AllUsers -ErrorAction SilentlyContinue
        if ($found) {
            # Remove for all users
            Get-AppxPackage -Name $AppxPackage.AppxName -AllUsers | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue #-WhatIf
            Write-CMTraceLog -Message "Removed AppxPackage for all users: $($AppxPackage.AppxName)" -Severity "Info"
        }
        else {
            Write-CMTraceLog -Message "AppxPackage not found for any user: $($AppxPackage.AppxName)" -Severity "Warning"
            continue
        }

        # Check if the provisioned package exists
        $provisioned = Get-AppxProvisionedPackage -Online | Where-Object DisplayName -EQ $AppxPackage.AppxName
        if ($provisioned) {
            # Remove provisioned package
            Get-AppxProvisionedPackage -Online | Where-Object DisplayName -EQ $AppxPackage.AppxName | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue #-WhatIf
            Write-CMTraceLog -Message "Removed provisioned AppxPackage: $($AppxPackage.AppxName)" -Severity "Info"
        }
        else {
            Write-CMTraceLog -Message "Provisioned AppxPackage not found: $($AppxPackage.AppxName)" -Severity "Warning"
        }
    }
    catch {
        # Log the error if removal fails
        $errorMessage = "Failed to remove $($AppxPackage.AppxName): $($_.Exception.Message)"
        Write-CMTraceLog -Message $errorMessage -Severity "Error"
        $errors += $errorMessage
    }
}

# Output compliance results
if ($errors.Count -eq 0) {
    Write-CMTraceLog -Message "All specified AppxPackages have been successfully removed." -Severity "Info"
    Write-Output "Compliant"
}
else {
    Write-CMTraceLog -Message "Errors occurred during removal. Details: $($errors -join '; ')" -Severity "Error"
    Write-Output "NonCompliant: Errors occurred during removal. Check the log for details."
}